// ==UserScript==
// @name         1v1.LOL ESP & Soft Aimbot
// @namespace    https://www.youtube.com/channel/UCS89chzAtaNmHqFdpbYmjaA
// @version      0.9
// @description  ESP & Soft Aimbot
// @author       X-Lazer
// @match        *://1v1.lol/*
// @match        *://1v1.school/*
// @match        *://play1v1.com/*
// @match        *://boxfight.io/*
// @match        *://zonewars.io/*
// @match        *://aim.lol/*
// @match        *://justaim.lol/*
// @match        *://justedit.lol/*
// @icon         https://cdn.discordapp.com/attachments/1140653139255636008/1161305889056227348/7894C643-A085-4F02-A576-24BB59480AE9.png
// @grant        none
// @run-at       document-start
// ==/UserScript==

const searchSize = 250; // Change for Search Size
const threshold = 4.7; // dont Touch
const aimbotSpeed = 0.1; // Change SoftAim speed

let aimbotEnabled = false;
let espEnabled = true;
let wireframeEnabled = false;
let guiEnabled = true;

const WebGL = WebGL2RenderingContext.prototype;

HTMLCanvasElement.prototype.getContext = new Proxy( HTMLCanvasElement.prototype.getContext, {
  apply(target, thisArgs, args) {
    if (args[1]) {
      args[1].preserveDrawingBuffer = true;
    }
    return Reflect.apply(...arguments);
  }
});

WebGL.shaderSource = new Proxy(WebGL.shaderSource, {
  apply(target, thisArgs, args) {
    if (args[1].indexOf('gl_Position') > -1) {
      args[1] = args[1].replace('void main', `
        out float vDepth;
        uniform bool enabled;
        uniform float threshold;
        void main
      `).replace(/return;/, `
        vDepth = gl_Position.z;
        if (enabled && vDepth > threshold) {
          gl_Position.z = 1.0;
        }
      `);
    } else if (args[1].indexOf('SV_Target0') > -1) {
      args[1] = args[1].replace('void main', `
        in float vDepth;
        uniform bool enabled;
        uniform float threshold;
        void main
      `).replace(/return;/, `
        if (enabled && vDepth > threshold) {
          SV_Target0 = vec4(1.0, 0.0, 0.0, 1.0);
        }
      `);
    }
    return Reflect.apply(...arguments);
  }
});

WebGL.getUniformLocation = new Proxy(WebGL.getUniformLocation, {
  apply(target, thisArgs, [program, name]) {
    const result = Reflect.apply(...arguments);
    if (result) {
      result.name = name;
      result.program = program;
    }
    return result;
  }
});

WebGL.uniform4fv = new Proxy(WebGL.uniform4fv, {
  apply(target, thisArgs, args) {
    if (args[0].name === 'hlslcc_mtx4x4unity_ObjectToWorld') {
      args[0].program.isUIProgram = true;
    }
    return Reflect.apply(...arguments);
  }
});

let movementX = 0,
  movementY = 0;
let count = 0;

WebGL.drawElements = new Proxy(WebGL.drawElements, {
  apply(target, thisArgs, args) {
    const program = thisArgs.getParameter(thisArgs.CURRENT_PROGRAM);
    if (!program.uniforms) {
      program.uniforms = {
        enabled: thisArgs.getUniformLocation(program, 'enabled'),
        threshold: thisArgs.getUniformLocation(program, 'threshold')
      };
    }
    const couldBePlayer = args[1] > 4000;
    thisArgs.uniform1i(program.uniforms.enabled, espEnabled && couldBePlayer );
		thisArgs.uniform1f( program.uniforms.threshold, threshold );

		args[ 0 ] = wireframeEnabled && ! program.isUIProgram && args[ 1 ] > 6 ? thisArgs.LINES : args[ 0 ];

		Reflect.apply( ...arguments );

		if ( aimbotEnabled && couldBePlayer ) {

			const width = Math.min( searchSize, thisArgs.canvas.width );
			const height = Math.min( searchSize, thisArgs.canvas.height );

			const pixels = new Uint8Array( width * height * 4 );

			const centerX = thisArgs.canvas.width / 2;
			const centerY = thisArgs.canvas.height / 2;

			const x = Math.floor( centerX - width / 2 );
			const y = Math.floor( centerY - height / 2 );

			thisArgs.readPixels( x, y, width, height, thisArgs.RGBA, thisArgs.UNSIGNED_BYTE, pixels );

			for ( let i = 0; i < pixels.length; i += 4 ) {

				if ( pixels[ i ] ===255 && pixels[ i + 1 ] === 0 && pixels[ i + 2 ] === 0 && pixels[ i + 3 ] === 255 ) {

					const idx = i / 4;

					const dx = idx % width;
					const dy = ( idx - dx ) / width;

					movementX += ( x + dx - centerX );
					movementY += - ( y + dy - centerY );

					count ++;

				}

			}

		}

	}
} );

window.requestAnimationFrame = new Proxy( window.requestAnimationFrame, {
	apply( target, thisArgs, args ) {

		args[ 0 ] = new Proxy( args[ 0 ], {
			apply() {

				const isPlaying = document.querySelector( 'canvas' ).style.cursor === 'none';

                const v = isPlaying && aimbotEnabled ? '' : 'none';

                if ( v !== rangeEl.style.display ) {

                    rangeEl.style.display = v;

                }

				if ( count > 0 && isPlaying ) {

					const f = aimbotSpeed / count;

					movementX *= f;
					movementY *= f;

					window.dispatchEvent( new MouseEvent( 'mousemove', { movementX, movementY } ) );

					! rangeEl.classList.contains( 'range-active' ) && rangeEl.classList.add( 'range-active' );

				} else {

					rangeEl.classList.contains( 'range-active' ) && rangeEl.classList.remove( 'range-active' );

				}

				movementX = 0;
				movementY = 0;
				count = 0;

				return Reflect.apply( ...arguments );

			}
		} );

		return Reflect.apply( ...arguments );

	}
} )

const value = parseInt( new URLSearchParams( window.location.search ).get( 'showAd' ), 16 );

const shouldShow = isNaN( value ) || Date.now() - value < 0 || Date.now() - value > 10 * 60 * 1000;

const el = document.createElement( 'div' );

el.innerHTML = `<style>

.dialog {
  position: absolute;
  left: 50%;
  top: 50%;
  padding: 20px;
  background: #080707;
  color: #ff2424;
  opacity: 98%;
  border-radius: 10px;
  border: 3px solid rgba(0, 0, 0, 0.3);
  transform: translate(-50%, -50%);
  text-align: center;
  z-index: 999999;
  font-family: cursive;
  animation: upAndDown 2s ease-in-out infinite;
}


@keyframes upAndDown {
  0% {
    transform: translate(-50%, -50%);
  }
  50% {
    transform: translate(-50%, calc(-50% - 10px));
  }
  100% {
    transform: translate(-50%, -50%);
  }
}

.dialog * {
	color: #ff2424;
}

.close {
	position: absolute;
	right: 5px;
	top: 5px;
	width: 20px;
	height: 20px;
	opacity: 0.5;
	cursor: pointer;

}

.close:before, .close:after {
	content: ' ';
	position: absolute;
	left: 50%;
	top: 50%;
	width: 100%;
	height: 20%;
	transform: translate(-50%, -50%) rotate(-45deg);
	background: #0593ff;
}

.close:after {
	transform: translate(-50%, -50%) rotate(45deg);
}

.close:hover {
	opacity: 1;
}

.btn {
	cursor: pointer;
	padding: 0.5em;
	background: #262424;
	border: 3px solid rgba(0, 0, 0, 0.3);
}

.btn:active {
	transform: scale(0.8);
}

.msg {
	position: absolute;
	left: 10px;
	bottom: 650px;
	background: #080707;
	color: #ff2424;
  border-radius: 10px;
	font-family: cursive;
	font-weight: bolder;
	padding: 15px;
	animation: msg 0.2s forwards, msg 0.2s reverse forwards 2s;
	z-index: 999999;
	pointer-events: none;
}


@keyframes msg {
	from {
		transform: translate(-120%, 0);
	}

	to {
		transform: none;
	}
}

.range {
	position: absolute;
	left: 50%;
	top: 50%;
	width: ${searchSize}px;
	height: ${searchSize}px;
  border-radius: 10px;
	max-width: 100%;
	max-height: 100%;
	border: 1px solid white;
	transform: translate(-50%, -50%);
}

.range-active {
  border-radius: 10px;
	border: 2px solid red;
}

.loader {
  border: 16px solid #f3f3f3; /* Light grey */
  border-top: 16px solid #3498db; /* Blue */
  border-radius: 50%;
  width: 120px;
  height: 120px;
  animation: spin 2s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}


</style>
<div class="dialog">${shouldShow ? `<big><big><img src="https://cdn.discordapp.com/attachments/1140653139255636008/1161310117472518164/static__1_-removebg-preview.png?ex=6537d554&is=65256054&hm=29ea3fe2fb01d22ac986bb8c1b2a5c645b73218b813326988d2f259f474d6dc8&"
</body>
  <br>
  𝐄𝐒𝐏 & 𝐒𝐨𝐟𝐭𝐀𝐢𝐦
  </big>
	<br>
	<br>
	[𝚃] 𝐓𝐨 𝐭𝐨𝐠𝐠𝐥𝐞 𝐒𝐨𝐟𝐭𝐀𝐢𝐦
	<br>
	[𝙼] 𝐓𝐨 𝐭𝐨𝐠𝐠𝐥𝐞 𝐄𝐒𝐏
	<br>
  [𝙽] 𝐓𝐨 𝐭𝐨𝐠𝐠𝐥𝐞 𝐖𝐢𝐫𝐞𝐟𝐫𝐚𝐦𝐞
  <br>
	[𝙷] 𝐓𝐨 𝐒𝐡𝐨𝐰/𝐇𝐢𝐝𝐞
	<br>
  <br>
  By X-Lazer
   <br>-------------------------------
  		<div style="display: grid; grid-template-columns: 1fr 1fr; grid-gap: 7px;">
		<div class="btn" onclick="window.open('https://www.youtube.com/channel/UCS89chzAtaNmHqFdpbYmjaA', '_blank')">𝘿𝙞𝙨𝙘𝙤𝙧𝙙</div>
		<div class="btn" onclick="window.open('https://sites.google.com/view/x-lazer', '_blank')">𝙒𝙚𝙗𝙨𝙞𝙩𝙚</div>
	</div>
	</big>` : `<div class="close" onclick="this.parentNode.style.display='none';"></div>
	</div>
	` }
</div>
<div class="msg" style="display: none;"></div>
<div class="range" style="display: none;"></div>`;

const msgEl = el.querySelector( '.msg' );
const dialogEl = el.querySelector( '.dialog' );

const rangeEl = el.querySelector( '.range' );

window.addEventListener( 'DOMContentLoaded', function () {

	while ( el.children.length > 0 ) {

		document.body.appendChild( el.children[ 0 ] );

	}

	if ( shouldShow ) {

		const url = new URL( window.location.href );

		url.searchParams.set( 'RPN', Date.now().toString( 16 ) );
		url.searchParams.set( 'scriptVersion', GM.info.script.version );

	}

} );

window.addEventListener( 'keyup', function ( event ) {

	switch ( String.fromCharCode( event.keyCode ) ) {

		case 'M' :

			espEnabled = ! espEnabled;

			showMsg( 'ESP', espEnabled );

			break;

		case 'N' :

			wireframeEnabled = ! wireframeEnabled;

			showMsg( 'Wireframe', wireframeEnabled );

			break;

		case 'T' :

			aimbotEnabled = ! aimbotEnabled;

			showMsg( 'Aimbot', aimbotEnabled );

			break;

		case 'H' :

      guiEnabled = ! guiEnabled;

			showMsg( 'GUI Menu', guiEnabled );


			dialogEl.style.display = dialogEl.style.display === '' ? 'none' : '';

			break;

	}

} );

function showMsg( name, bool ) {

	msgEl.innerText = name + ': ' + ( bool ? 'ON 🟩 ' : 'OFF 🟥' );

	msgEl.style.display = 'none';

	void msgEl.offsetWidth;

	msgEl.style.display = '';

}
